// <auto-generated />
using System;
using Corona.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Corona.Migrations
{
    [DbContext(typeof(CoronaContext))]
    partial class CoronaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Corona.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Corona.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Idnumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MedicalAidId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalAidNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalPlanId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PlanId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuburbId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalAidId");

                    b.HasIndex("MedicalPlanId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SuburbId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e867a628-9a62-4531-9737-e0ab299afee3",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "maria",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7809b774-3556-42a6-b02a-63d8a66fdf7a",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            UserStatus = "A"
                        });
                });

            modelBuilder.Entity("Corona.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Corona.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblClaims");
                });

            modelBuilder.Entity("Corona.Models.Content.City", b =>
                {
                    b.Property<string>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CityId");

                    b.ToTable("tblCity");

                    b.HasData(
                        new
                        {
                            CityId = "1",
                            CityName = "Gqeberha"
                        });
                });

            modelBuilder.Entity("Corona.Models.Content.PatientVitals", b =>
                {
                    b.Property<string>("VitalsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodPressure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OxygenLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Temperature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestResult")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VitalsId");

                    b.HasIndex("LabUserId");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientVitals");
                });

            modelBuilder.Entity("Corona.Models.Content.Province", b =>
                {
                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("tblProvince");
                });

            modelBuilder.Entity("Corona.Models.Content.RequestTest", b =>
                {
                    b.Property<string>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DependentId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuburbId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId");

                    b.HasIndex("DependentId");

                    b.HasIndex("NurseId");

                    b.HasIndex("RequestorId");

                    b.HasIndex("SuburbId");

                    b.ToTable("tblRequestTest");
                });

            modelBuilder.Entity("Corona.Models.Content.Suburb", b =>
                {
                    b.Property<string>("SuburbId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SuburbName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SuburbId");

                    b.HasIndex("CityId");

                    b.ToTable("tblSuburb");

                    b.HasData(
                        new
                        {
                            SuburbId = "57",
                            CityId = "1",
                            SuburbName = "Humewood"
                        },
                        new
                        {
                            SuburbId = "126",
                            CityId = "1",
                            SuburbName = "Summerstrand"
                        },
                        new
                        {
                            SuburbId = "127",
                            CityId = "1",
                            SuburbName = "Summerwood"
                        },
                        new
                        {
                            SuburbId = "56",
                            CityId = "1",
                            SuburbName = "Humerail"
                        },
                        new
                        {
                            SuburbId = "91",
                            CityId = "1",
                            SuburbName = "New Brighton"
                        },
                        new
                        {
                            SuburbId = "117",
                            CityId = "1",
                            SuburbName = "Sherwood"
                        });
                });

            modelBuilder.Entity("Corona.Models.Content.TestBooking", b =>
                {
                    b.Property<string>("TestBookingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestTestRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeSlot")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestBookingId");

                    b.HasIndex("NurseId");

                    b.HasIndex("RequestTestRequestId");

                    b.ToTable("tblTestBooking");
                });

            modelBuilder.Entity("Corona.Models.Dependent", b =>
                {
                    b.Property<string>("DependentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CityId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Idnumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MainMemberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalAidId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalAidNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalPlanId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SuburbId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DependentId");

                    b.HasIndex("CityId");

                    b.HasIndex("MainMemberId");

                    b.HasIndex("MedicalAidId");

                    b.HasIndex("MedicalPlanId");

                    b.HasIndex("SuburbId");

                    b.ToTable("tblDependent");

                    b.HasData(
                        new
                        {
                            DependentId = "91",
                            AddressLine1 = "19 Admirality Way",
                            AddressLine2 = "",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "daleen@gmail.com",
                            FirstName = "Daleen",
                            Idnumber = "8009160225083",
                            LastName = "Meintjies",
                            MedicalAidNumber = "285465885",
                            MedicalPlanId = "8",
                            PatientId = "2",
                            PhoneNumber = "0832458796",
                            SuburbId = "126"
                        });
                });

            modelBuilder.Entity("Corona.Models.FavouriteSuburb", b =>
                {
                    b.Property<string>("FavouriteId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("NurseId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SuburbId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FavouriteId");

                    b.HasIndex("NurseId");

                    b.HasIndex("SuburbId");

                    b.ToTable("tblFavourateSuburb");
                });

            modelBuilder.Entity("Corona.Models.MedicalAid", b =>
                {
                    b.Property<string>("MedicalAidId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalPlanId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MedicalAidId");

                    b.HasIndex("MedicalPlanId");

                    b.ToTable("tblMedicalAid");

                    b.HasData(
                        new
                        {
                            MedicalAidId = "1",
                            MedicalName = "BestMed"
                        },
                        new
                        {
                            MedicalAidId = "2",
                            MedicalName = "Bonitas"
                        },
                        new
                        {
                            MedicalAidId = "3",
                            MedicalName = "Discovery Health"
                        });
                });

            modelBuilder.Entity("Corona.Models.MedicalPlan", b =>
                {
                    b.Property<string>("MedicalPlanId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalAidId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MedicalPlanId");

                    b.ToTable("tblMedicalPlans");

                    b.HasData(
                        new
                        {
                            MedicalPlanId = "1",
                            MedicalAidId = "1",
                            PlanName = "Beat 1"
                        },
                        new
                        {
                            MedicalPlanId = "2",
                            MedicalAidId = "1",
                            PlanName = "Beat 2"
                        },
                        new
                        {
                            MedicalPlanId = "3",
                            MedicalAidId = "1",
                            PlanName = "Beat 3"
                        },
                        new
                        {
                            MedicalPlanId = "4",
                            MedicalAidId = "1",
                            PlanName = "Beat 4"
                        },
                        new
                        {
                            MedicalPlanId = "5",
                            MedicalAidId = "1",
                            PlanName = "Pulse 1"
                        },
                        new
                        {
                            MedicalPlanId = "6",
                            MedicalAidId = "1",
                            PlanName = "Pulse 2"
                        },
                        new
                        {
                            MedicalPlanId = "7",
                            MedicalAidId = "1",
                            PlanName = "Pace 1"
                        },
                        new
                        {
                            MedicalPlanId = "8",
                            MedicalAidId = "1",
                            PlanName = "Pulse 2"
                        },
                        new
                        {
                            MedicalPlanId = "9",
                            MedicalAidId = "1",
                            PlanName = "Pulse 3"
                        },
                        new
                        {
                            MedicalPlanId = "10",
                            MedicalAidId = "1",
                            PlanName = "Pulse 4"
                        },
                        new
                        {
                            MedicalPlanId = "11",
                            MedicalAidId = "2",
                            PlanName = "BonStart"
                        },
                        new
                        {
                            MedicalPlanId = "12",
                            MedicalAidId = "2",
                            PlanName = "Primary"
                        },
                        new
                        {
                            MedicalPlanId = "13",
                            MedicalAidId = "2",
                            PlanName = "Primary Select"
                        },
                        new
                        {
                            MedicalPlanId = "14",
                            MedicalAidId = "2",
                            PlanName = "Standard"
                        },
                        new
                        {
                            MedicalPlanId = "15",
                            MedicalAidId = "2",
                            PlanName = "Standard Select"
                        },
                        new
                        {
                            MedicalPlanId = "16",
                            MedicalAidId = "2",
                            PlanName = "BonFit Select"
                        },
                        new
                        {
                            MedicalPlanId = "17",
                            MedicalAidId = "2",
                            PlanName = "BonSave"
                        },
                        new
                        {
                            MedicalPlanId = "18",
                            MedicalAidId = "2",
                            PlanName = "BonComplete"
                        },
                        new
                        {
                            MedicalPlanId = "19",
                            MedicalAidId = "2",
                            PlanName = "BonClassic"
                        },
                        new
                        {
                            MedicalPlanId = "20",
                            MedicalAidId = "2",
                            PlanName = "BonComprehensive"
                        },
                        new
                        {
                            MedicalPlanId = "21",
                            MedicalAidId = "2",
                            PlanName = "Hospital Standard"
                        },
                        new
                        {
                            MedicalPlanId = "22",
                            MedicalAidId = "2",
                            PlanName = "BonEssential"
                        },
                        new
                        {
                            MedicalPlanId = "23",
                            MedicalAidId = "2",
                            PlanName = "BonEssentialSelect"
                        },
                        new
                        {
                            MedicalPlanId = "24",
                            MedicalAidId = "2",
                            PlanName = "BonCap"
                        },
                        new
                        {
                            MedicalPlanId = "25",
                            MedicalAidId = "3",
                            PlanName = "Executive"
                        },
                        new
                        {
                            MedicalPlanId = "26",
                            MedicalAidId = "3",
                            PlanName = "Classic Comprehensive"
                        },
                        new
                        {
                            MedicalPlanId = "27",
                            MedicalAidId = "3",
                            PlanName = "Classic Delta Comprehensive"
                        },
                        new
                        {
                            MedicalPlanId = "28",
                            MedicalAidId = "3",
                            PlanName = "Classic Smart Comprehensive"
                        },
                        new
                        {
                            MedicalPlanId = "29",
                            MedicalAidId = "3",
                            PlanName = "Essential Comprehensive"
                        },
                        new
                        {
                            MedicalPlanId = "30",
                            MedicalAidId = "3",
                            PlanName = "Essential Delta"
                        },
                        new
                        {
                            MedicalPlanId = "31",
                            MedicalAidId = "3",
                            PlanName = "Essential Comprehensive"
                        },
                        new
                        {
                            MedicalPlanId = "32",
                            MedicalAidId = "3",
                            PlanName = "Essential Priority"
                        },
                        new
                        {
                            MedicalPlanId = "33",
                            MedicalAidId = "3",
                            PlanName = "Classic Saver"
                        },
                        new
                        {
                            MedicalPlanId = "34",
                            MedicalAidId = "3",
                            PlanName = "Classic Delta Saver"
                        },
                        new
                        {
                            MedicalPlanId = "35",
                            MedicalAidId = "3",
                            PlanName = "Essential Saver"
                        },
                        new
                        {
                            MedicalPlanId = "36",
                            MedicalAidId = "3",
                            PlanName = "Essential Delta Saver"
                        },
                        new
                        {
                            MedicalPlanId = "37",
                            MedicalAidId = "3",
                            PlanName = "Coastal Saver"
                        },
                        new
                        {
                            MedicalPlanId = "38",
                            MedicalAidId = "3",
                            PlanName = "Classic Smart"
                        },
                        new
                        {
                            MedicalPlanId = "39",
                            MedicalAidId = "3",
                            PlanName = "Essential Smart"
                        },
                        new
                        {
                            MedicalPlanId = "40",
                            MedicalAidId = "3",
                            PlanName = "Classic Core"
                        },
                        new
                        {
                            MedicalPlanId = "41",
                            MedicalAidId = "3",
                            PlanName = "Classic Delta Core"
                        },
                        new
                        {
                            MedicalPlanId = "42",
                            MedicalAidId = "3",
                            PlanName = "Essential Core"
                        },
                        new
                        {
                            MedicalPlanId = "43",
                            MedicalAidId = "3",
                            PlanName = "Essential Delta Core"
                        },
                        new
                        {
                            MedicalPlanId = "44",
                            MedicalAidId = "3",
                            PlanName = "Coastal Core"
                        },
                        new
                        {
                            MedicalPlanId = "45",
                            MedicalAidId = "3",
                            PlanName = "Keycare Plus"
                        },
                        new
                        {
                            MedicalPlanId = "46",
                            MedicalAidId = "3",
                            PlanName = "Keycare Smart"
                        },
                        new
                        {
                            MedicalPlanId = "47",
                            MedicalAidId = "3",
                            PlanName = "Keycare Core"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Corona.Models.ApplicationUser", b =>
                {
                    b.HasOne("Corona.Models.MedicalAid", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalAidId");

                    b.HasOne("Corona.Models.MedicalPlan", "MedicalPlan")
                        .WithMany()
                        .HasForeignKey("MedicalPlanId");

                    b.HasOne("Corona.Models.Content.Province", null)
                        .WithMany("TblUser")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Corona.Models.Content.Suburb", "Suburb")
                        .WithMany()
                        .HasForeignKey("SuburbId");

                    b.Navigation("Medical");

                    b.Navigation("MedicalPlan");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("Corona.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Corona.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Corona.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Corona.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Corona.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Corona.Models.Content.PatientVitals", b =>
                {
                    b.HasOne("Corona.Models.ApplicationUser", "LabUser")
                        .WithMany("LabUsers")
                        .HasForeignKey("LabUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Corona.Models.ApplicationUser", "Nurse")
                        .WithMany("Nurses")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Corona.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("LabUser");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Corona.Models.Content.RequestTest", b =>
                {
                    b.HasOne("Corona.Models.Dependent", "Dependent")
                        .WithMany("RequestTests")
                        .HasForeignKey("DependentId");

                    b.HasOne("Corona.Models.ApplicationUser", "Nurse")
                        .WithMany("NurseRequest")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Corona.Models.ApplicationUser", "Requestor")
                        .WithMany("PatientRequest")
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Corona.Models.Content.Suburb", "Suburb")
                        .WithMany()
                        .HasForeignKey("SuburbId");

                    b.Navigation("Dependent");

                    b.Navigation("Nurse");

                    b.Navigation("Requestor");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("Corona.Models.Content.Suburb", b =>
                {
                    b.HasOne("Corona.Models.Content.City", "City")
                        .WithMany("Suburbs")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Corona.Models.Content.TestBooking", b =>
                {
                    b.HasOne("Corona.Models.ApplicationUser", "Nurse")
                        .WithMany("AllNurses")
                        .HasForeignKey("NurseId");

                    b.HasOne("Corona.Models.Content.RequestTest", "RequestTest")
                        .WithMany("TestBookings")
                        .HasForeignKey("RequestTestRequestId");

                    b.Navigation("Nurse");

                    b.Navigation("RequestTest");
                });

            modelBuilder.Entity("Corona.Models.Dependent", b =>
                {
                    b.HasOne("Corona.Models.Content.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Corona.Models.ApplicationUser", "MainMember")
                        .WithMany("Dependents")
                        .HasForeignKey("MainMemberId");

                    b.HasOne("Corona.Models.MedicalAid", "Medical")
                        .WithMany("Dependents")
                        .HasForeignKey("MedicalAidId");

                    b.HasOne("Corona.Models.MedicalPlan", "MedicalPlan")
                        .WithMany()
                        .HasForeignKey("MedicalPlanId");

                    b.HasOne("Corona.Models.Content.Suburb", "Suburb")
                        .WithMany("Dependents")
                        .HasForeignKey("SuburbId");

                    b.Navigation("City");

                    b.Navigation("MainMember");

                    b.Navigation("Medical");

                    b.Navigation("MedicalPlan");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("Corona.Models.FavouriteSuburb", b =>
                {
                    b.HasOne("Corona.Models.ApplicationUser", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.HasOne("Corona.Models.Content.Suburb", "Suburb")
                        .WithMany("Favourites")
                        .HasForeignKey("SuburbId");

                    b.Navigation("Nurse");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("Corona.Models.MedicalAid", b =>
                {
                    b.HasOne("Corona.Models.MedicalPlan", "MedicalPlan")
                        .WithMany("GetMedicalAids")
                        .HasForeignKey("MedicalPlanId");

                    b.Navigation("MedicalPlan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Corona.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Corona.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Corona.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Corona.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Corona.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Corona.Models.ApplicationUser", b =>
                {
                    b.Navigation("AllNurses");

                    b.Navigation("Dependents");

                    b.Navigation("LabUsers");

                    b.Navigation("NurseRequest");

                    b.Navigation("Nurses");

                    b.Navigation("PatientRequest");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Corona.Models.Content.City", b =>
                {
                    b.Navigation("Suburbs");
                });

            modelBuilder.Entity("Corona.Models.Content.Province", b =>
                {
                    b.Navigation("TblUser");
                });

            modelBuilder.Entity("Corona.Models.Content.RequestTest", b =>
                {
                    b.Navigation("TestBookings");
                });

            modelBuilder.Entity("Corona.Models.Content.Suburb", b =>
                {
                    b.Navigation("Dependents");

                    b.Navigation("Favourites");
                });

            modelBuilder.Entity("Corona.Models.Dependent", b =>
                {
                    b.Navigation("RequestTests");
                });

            modelBuilder.Entity("Corona.Models.MedicalAid", b =>
                {
                    b.Navigation("Dependents");
                });

            modelBuilder.Entity("Corona.Models.MedicalPlan", b =>
                {
                    b.Navigation("GetMedicalAids");
                });
#pragma warning restore 612, 618
        }
    }
}
